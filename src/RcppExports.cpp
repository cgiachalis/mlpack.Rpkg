// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <mlpack.h>
#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// addOne_arma
arma::vec addOne_arma(arma::vec& x);
RcppExport SEXP _mlpack_Rpkg_addOne_arma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(addOne_arma(x));
    return rcpp_result_gen;
END_RCPP
}
// addOne_rcpp
Rcpp::NumericVector addOne_rcpp(Rcpp::NumericVector& x);
RcppExport SEXP _mlpack_Rpkg_addOne_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(addOne_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// knnDemo
Rcpp::List knnDemo(const arma::mat& Reference, const arma::mat& Query, int k, bool verbose);
RcppExport SEXP _mlpack_Rpkg_knnDemo(SEXP ReferenceSEXP, SEXP QuerySEXP, SEXP kSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Reference(ReferenceSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Query(QuerySEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(knnDemo(Reference, Query, k, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mlpack_Rpkg_addOne_arma", (DL_FUNC) &_mlpack_Rpkg_addOne_arma, 1},
    {"_mlpack_Rpkg_addOne_rcpp", (DL_FUNC) &_mlpack_Rpkg_addOne_rcpp, 1},
    {"_mlpack_Rpkg_knnDemo", (DL_FUNC) &_mlpack_Rpkg_knnDemo, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mlpack_Rpkg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
